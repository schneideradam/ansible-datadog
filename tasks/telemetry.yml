---
- name: Build language telemetry map
  set_fact:
    telemetry_library_key:
      java: specified_java_lib_version
      js: specified_nodejs_lib_version
      dotnet: specified_dotnet_lib_version
      python: specified_python_lib_version
      ruby: specified_ruby_lib_version

- name: Build APM library installation payloads for telemetry
  set_fact:
    telemetry_payload:
      "{{ telemetry_payload | default({}) |
          combine({telemetry_library_key[item.split(':')[0]]:
            item.split(':')[1] | default('default')}) }}"
  loop: "{{ pre_processed_datadog_apm_libraries }}"

- name: Build telemetry request
  set_fact:
    telemetry_request:
      request_type: 'apm-onboarding-event'
      api_version: 'v2'
      application:
        service_name: "{{ ansible_hostname }}"
      payload:
        event_name: 'agent.injection.success'
        tags: "{{ {'install_time': ansible_date_time.epoch | int,
                   'install_type': 'ansible'} |
                   combine(telemetry_payload) }}"

- name: Send installation telemetry to Datadog
  uri:
    url: "{{ datadog_apm_telemetry_endpoint }}"
    method: POST
    return_content: true
    body_format: json
    body: "{{ telemetry_request }}"
    headers:
      DD-API-KEY: "{{ datadog_api_key }}"
    status_code: 202
  failed_when: false
  changed_when: false
  when: not ansible_check_mode

- name: Set datadog etc dir location
  set_fact:
    datadog_etc_dir: "{{ '/etc/dd-agent/'
      if datadog_agent_major_version == 5
      else '/etc/datadog-agent/' }}"
  when: not ansible_check_mode

- name: Check if install.json exists
  stat:
    path: "{{ datadog_etc_dir }}install.json"
  register: install_file

- name: Parse install.json file if it exists
  set_fact:
    install_info: "{{ lookup(
      'file', install_file.stat.path) | from_json }}"
  when: install_file.stat.exists

- name: Generate uuid based on /proc/sys/kernel/random/uuid
  command: cat /proc/sys/kernel/random/uuid > /dev/null
  register: install_id
  failed_when: false
  when: not install_file.stat.exists

- name: Generate uuid using uuidgen
  command: uuidgen > /dev/null
  register: install_id
  when: 
    - not install_file.stat.exists
    - install_id is failed

- name: Set install signature from file if it exists
  set_fact:
    install_signature:
      install_id: "{{ install_info.install_id }}"
      install_type: "{{ 'ansible_single_step'
        if (datadog_apm_instrumentation_enabled | length) > 0 else 'ansible_manual' }}"
      install_time: "{{ install_info.install_time }}"
  when: install_file.stat.exists
      
- name: Generate install signature
  set_fact:
    install_signature:
      install_id: "{{ install_id.stdout }}"
      install_type: "{{ 'ansible_single_step'
        if (datadog_apm_instrumentation_enabled | length) > 0 else 'ansible_manual' }}"
      install_time: "{{ ansible_date_time.epoch }}"
  when: not install_file.stat.exists

- name: Create json file
  copy:
    dest: "{{ datadog_etc_dir }}install.json"
    content: "{{ install_signature | to_json }}"
  failed_when: false
  changed_when: false
